generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COOK
  WAITER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETE
  DELIVERED
  FINISHED
  CANCELED
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  subdomain String   @unique
  address   String
  latitude  Float
  longitude Float
  logoUrl   String   @map("logo_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users      User[]
  categories Category[]
  dishes     Dish[]
  orders     Order[]
  tables     Table[]

  @@map("companies")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  password  String
  role      Role
  avatarUrl String   @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  waiterOrders Order[] @relation("WaiterOrders")
  cookOrders   Order[] @relation("CookOrders")

  @@unique([email, companyId])
  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  dishes    Dish[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  @@unique([name, companyId])
  @@map("categories")
}

model Dish {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String   @map("image_url")
  categoryId  Int?
  ingredients String[]
  weightGr    Int?     @map("weight_gr")
  calories    Int?
  available   Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  category   Category?   @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  Company    Company?    @relation(fields: [companyId], references: [id])
  companyId  Int?

  @@unique([name, companyId])
  @@map("dishes")
}

model Order {
  id        Int         @id @default(autoincrement())
  waiterId  Int
  cookId    Int?
  status    OrderStatus @default(PENDING)
  tableId   Int?
  companyId Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company    Company     @relation(fields: [companyId], references: [id])
  waiter     User        @relation("WaiterOrders", fields: [waiterId], references: [id])
  cook       User?       @relation("CookOrders", fields: [cookId], references: [id])
  orderItems OrderItem[]
  table      Table?      @relation(fields: [tableId], references: [id])

  @@index([createdAt])
  @@index([status])
  @@index([waiterId])
  @@index([cookId])
  @@map("orders")
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  orderId  Int
  dishId   Int
  quantity Int
  price    Float
  notes    String?

  order Order @relation(fields: [orderId], references: [id])
  dish  Dish  @relation(fields: [dishId], references: [id])

  @@index([dishId])
  @@map("order_items")
}

model Table {
  id        Int     @id @default(autoincrement())
  number    Int
  seats     Int
  active    Boolean @default(true)
  companyId Int

  company Company @relation(fields: [companyId], references: [id])
  orders  Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([companyId, number])
  @@map("tables")
}
